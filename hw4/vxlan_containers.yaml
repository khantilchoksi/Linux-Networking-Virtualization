---
- hosts: localhost
  gather_facts: no
  vars:
    packages:
       - docker
    docker_image: ubuntu_netw
    csv_file: 
      - container1: cs14
        container2: cs15
        network_type: vxlan
        lc1_ip: 101.0.4.1/24
        lc2_ip: 101.0.5.1/24
        container1_ip: 101.0.4.2/24
        container1_netw: 101.0.4.0/24
        container2_ip: 101.0.5.2/24
        container2_netw: 101.0.5.0/24
        lc11_mgmt_ip: 101.0.6.1/24
        lc2_mgmt_ip: 101.0.7.1/24
        lc11_ns_mgmt_ip: 101.0.6.2/24
        lc2_ns_mgmt_ip: 101.0.7.2/24

  tasks:
    # Install required packages
    - name: Install required packages for docker
      apt: 
        name: "{{packages}}"
      become: yes

    - debug:
         msg: "{{csv_file}}"

    # Create docker image if not exists
    - name: Create docker image if not exists
      docker_image:
        path: .
        name: "{{docker_image}}"
        state: present

    # Create container1
    - name: Create and start container 1 if already not present
      docker_container:
        name: "{{item.container1}}"
        image: "{{docker_image}}"
        state: started
        privileged: yes
        command: sleep infinity
      with_items: "{{csv_file}}"

    # Create container2
    - name: Create and start container 2 if already not present
      docker_container:
        name: "{{item.container2}}"
        image: "{{docker_image}}"
        state: started
        privileged: yes
        command: sleep infinity
      with_items: "{{csv_file}}"

    # Create Namespace for container1 vxlan
    - name: Create Namespace for container1 vxlan
      command: "ip netns add d{{item.container1}}"
      with_items: "{{csv_file}}"
      become: yes

    # Create Namespace for container2 vxlan
    - name: Create Namespace for container2 vxlan
      command: "ip netns add d{{item.container2}}"
      with_items: "{{csv_file}}"
      become: yes
    
    # Create Bridge inside namespace of container1
    - name: Create Bridge inside namespace of container1
      command: "ip netns exec d{{item.container1}} brctl addbr {{item.container1}}br"
      with_items: "{{csv_file}}"
      become: yes

    # Create Bridge inside namespace of container2
    - name: Create Bridge inside namespace of container2
      command: "ip netns exec d{{item.container2}} brctl addbr {{item.container2}}br"
      with_items: "{{csv_file}}"
      become: yes

    # Create management vethpair between leaf container1 and namespace
    - name: Create management vethpair between leaf container and namespace
      include_tasks: connect_container_namespace_mgmt.yaml
      vars:
        container_name: lc11
        container_ip: "{{item.lc11_mgmt_ip}}"
        namespace_ip: "{{item.lc11_ns_mgmt_ip}}"
        other_leaf_subnet: "{{item.container2_netw}}"
      with_items: "{{csv_file}}"
      become: yes
    
    # Create management vethpair between leaf container2 and namespace
    - name: Create management vethpair between leaf container2 and namespace
      include_tasks: connect_container_namespace_mgmt.yaml
      vars:
        container_name: lc2
        container_ip: "{{item.lc2_mgmt_ip}}"
        namespace_ip: "{{item.lc2_ns_mgmt_ip}}"
        other_leaf_subnet: "{{item.container1_netw}}"
      with_items: "{{csv_file}}"
      become: yes
  
    # Connect VXLAN
    - name: Connect  VXLAN for container1 namespace
      command: "ip netns exec d{{item.container1}} ip link add name vxlan0 type vxlan id 42 dev {{item.container1}}nsvif2 local {{item.lc11_ns_mgmt_ip}} remote {{item.lc2_ns_mgmt_ip}} dstport 4789"
      with_items: "{{csv_file}}"
      become: yes

    # Make vxlan interface up for container 1 namespace
    - name: Make vxlan interface up for container 1 namespace
      command: "ip netns exec d{{item.container1}} ip link set dev vxlan0 up"
      with_items: "{{csv_file}}"
      become: yes

    # Add vxlan to bridge container1 namespace
    - name: Add vxlan to bridge container1 namespace
      command: "ip netns exec d{{item.container1}} brctl addif {{item.container1}}br vxlan0"
      with_items: "{{csv_file}}"
      become: yes
    
    # Connect VXLAN
    - name: Connect  VXLAN for container2 namespace
      command: "ip netns exec ip d{{item.container2}} link add name vxlan0 type vxlan id 42 dev {{item.container2}}nsvif2 local {{item.lc2_ns_mgmt_ip}} remote {{item.lc11_ns_mgmt_ip}} dstport 4789"
      with_items: "{{csv_file}}"
      become: yes

    # Make vxlan interface up for container 2 namespace
    - name: Make vxlan interface up for container 2 namespace
      command: "ip netns exec d{{item.container2}} ip link set dev vxlan0 up"
      with_items: "{{csv_file}}"
      become: yes
    
    # Add vxlan to bridge container2 namespace
    - name: Add vxlan to bridge container2 namespace
      command: "ip netns exec d{{item.container2}} brctl addif {{item.container2}}br vxlan0"
      with_items: "{{csv_file}}"
      become: yes
    
    # Connect LC1 with bridge
    - name: Connect LC1 with bridge
      include_tasks: connect_container_l3.yaml
      vars:
        container_name: lc11
        bridge_name: "{{item.container1}}br"
        interface_ip: "{{item.lc1_ip}}"
        other_leaf_subnet: "{{item.container2_netw}}"
      with_items: "{{csv_file}}"

    # Connect LC2 with bridge
    - name: Connect LC2 with bridge
      include_tasks: connect_container_l3.yaml
      vars:
        container_name: lc2
        bridge_name: "{{item.container2}}br"
        interface_ip: "{{item.lc2_ip}}"
        other_leaf_subnet: "{{item.container1_netw}}"
      with_items: "{{csv_file}}"

    # Connect Container1 with bridge
    - name: Connect Container1 with bridge
      include_tasks: connect_container_bridge.yaml
      vars:
        container_name: "{{item.container1}}"
        bridge_name: "{{item.container1}}br"
        interface_ip: "{{item.container1_ip}}"
      with_items: "{{csv_file}}"

    # Connect Container2 with bridge
    - name: Connect Container2 with bridge
      include_tasks: connect_container_bridge.yaml
      vars:
        container_name: "{{item.container2}}"
        bridge_name: "{{item.container2}}br"
        interface_ip: "{{item.container2_ip}}"
      with_items: "{{csv_file}}"

    # # Create veth pair for bridge and LC1
    # - name: Create veth pair for bridge and LC1
    #   command: "ip link add {{item.container1}}{{item.container2}}brvif1 type veth peer name {{item.container1}}{{item.container2}}brvif2"
    #   with_items: "{{csv_file}}"

    # # Attach brvif2 to bridge
    # - name: Attach brvif2 to bridge
    #   command: "brctl addif {{item.container1}}{{item.container2}}br {{item.container1}}{{item.container2}}brvif2"
    #   become: yes

    # # Make the bridge interface up
    # - name: Make the bridge interface up
    #   command: "ifconfig {{item.container1}}{{item.container2}}br up"
    #   become: yes

    # # Make the brvif2 up
    # - name: Make the brvif2 up
    #   command: "ifconfig {{item.container1}}{{item.container2}}brvif2 up"
    #   become: yes

    # # Fetch LC1 process ID
    # - name: Fetch LC1 process ID
    #   command: docker inspect --format '{{.State.Pid}}' lc11
    #   register: lc1_pid

    # # Attach brvif1 to container
    # - name: Attach brvif1 to container
    #   command: "ip link set netns {{lc1_pid}} dev {{item.container1}}{{item.container2}}brvif1"
    #   become: yes
    #   with_items: "{{csv_file}}"

    # # Make the container interface running 
    # - name: Make the interface running 
    #   command: "nsenter -t {{lc1_pid}} -n ip link set {{item.container1}}{{item.container2}}brvif1 up"
    #   become: yes
    #   with_items: "{{csv_file}}"

    # # Assign ip to LC1 container interface
    # - name: Attach brvif1 to container
    #   command: "udo nsenter -t {{lc1_pid}} -n ip addr add {{item.lc1_ip}} dev {{item.container1}}{{item.container2}}brvif1"
    #   become: yes
    #   with_items: "{{csv_file}}"


    
    
