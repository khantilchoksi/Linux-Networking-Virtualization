---
- hosts: localhost
  gather_facts: no
  vars:
    packages:
       - python-libvirt
       - python-lxml
    vm_disk_location: /var/lib/libvirt/images
    root_pass: root
    # Networks dictionary
    networks:
      l22:
        network_name: l22
        bridge_name: swovs22
        template: templates/bridge_template.xml.j2
      # l31:
      #   network_name: l31
      #   bridge_name: swovs3
      #   template: templates/routed_bridge_template.xml.j2
      # other1:
      #   network_name: other1
      #   bridge_name: swovs4
      #   template: templates/routed_bridge_template.xml.j2
    guests:
       - name: khchoksi10
         mem: 512
         vcpu: 1
         disk: 12G
         network1: "{{ networks['internet1']['network_name'] }}"
         network2: "{{ networks['l21']['network_name'] }}"
#       - name: khchoksi11
#         mem: 512
#         vcpu: 1
#         disk: 12G
#         network1: "{{ networks['internet1']['network_name'] }}"
#         network2: "{{ networks['l21']['network_name'] }}"

  tasks:
    # Create an OVS type bridge
    # - name: Create OVS Bridge
    #  openvswitch_bridge:
    #     bridge: "{{item.value.bridge_name}}"
    #     state: present
    #  with_items: "{{ lookup('dict', networks) }}"
    #  ignore_errors: true
    #  become: yes

    # Install required packages
    - name: Install required packages for libvirt, lxml
      apt: 
        name: "{{packages}}"
      become: yes
    
    # Define a new network
    - name: Define Virtual Network
      virt_net:
        command: define
        name: "{{networks[item].network_name}}"
        xml: "{{ lookup('template', '{{networks[item].template}}' ) }}"
      with_items: "{{ networks | list }}"
      ignore_errors: true

    # Create and start a network
    - name: Create Virtual Network if not created
      virt_net:
        command: create
        name: "{{ networks[item].network_name }}"
      with_items: "{{ networks | list }}"
      ignore_errors: true
      become: yes

    # Start network
    - name: Start Virtual Network back if it is stopped
      virt_net:
         command: start
         name: "{{ networks[item].network_name }}"
      with_items: "{{ networks | list }}"
      ignore_errors: true
      become: yes

    # Create an OVS type bridge
    - name: Create OVS Bridge
      openvswitch_bridge:
         bridge: "{{item.value.bridge_name}}"
         state: present
      with_items: "{{ lookup('dict', networks) }}"
      become: yes
