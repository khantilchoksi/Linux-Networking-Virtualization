---
- hosts: localhost
  gather_facts: no
  vars:
    packages:
       - python-libvirt
       - python-lxml
    vm_disk_location: /var/lib/libvirt/images
    root_pass: root
    # Networks dictionary
    networks:
      internet1:
        network_name: internet1
        bridge_name: swovs1
        template: templates/nat_bridge_template.xml.j2
      l21:
        network_name: l21
        bridge_name: swovs2
        template: templates/bridge_template.xml.j2
      # l31:
      #   network_name: l31
      #   bridge_name: swovs3
      #   template: templates/routed_bridge_template.xml.j2
      # other1:
      #   network_name: other1
      #   bridge_name: swovs4
      #   template: templates/routed_bridge_template.xml.j2
    guests:
       - name: khchoksi10
         mem: 512
         vcpu: 1
         disk: 5
         network1: "{{ networks['internet1']['network_name'] }}"
         network2: "{{ networks['l21']['network_name'] }}"
       - name: khchoksi11
         mem: 512
         vcpu: 1
         disk: 5
         network1: "{{ networks['internet1']['network_name'] }}"
         network2: "{{ networks['l21']['network_name'] }}"

  tasks:
    # Create an OVS type bridge
    - name: Create OVS Bridge
      openvswitch_bridge:
         bridge: "{{item.bridge_name}}"
         state: present
      with_items: "{{ lookup('dict', networks) }}"
      ignore_errors: true
      become: yes

    # Install required packages
    - name: Install required packages for libvirt, lxml
      apt: 
        name: "{{packages}}"
      become: yes
    
    # Define a new network
    - name: Define Virtual Network
      virt_net:
        command: define
        name: '{{ item.network_name }}'
        xml: "{{ lookup('template', 'item.template') }}"
      with_items: "{{ lookup('dict', networks) }}"
      ignore_errors: true
      become: yes

    # Create and start a network
    - name: Create Virtual Network if not created
      virt_net:
       command: create
       name: "{{ item.network_name }}"
      ignore_errors: true
      with_items: "{{ lookup('dict', networks) }}"
      become: yes
    
    # Get List of VM Disks
    - name: get VM disks
      command: "ls {{ vm_location }}"
      register: disks
      changed_when: "disks.rc != 0"
      become: yes
  
    #Create VM Disks
    - name: Create VM disk
      command: >
               virt-builder --format qcow2 centos-7.4
               -o {{ vm_location}}/{{ item.name }}.img
               --root-password password:{{ root_pass }}
      when: item.name not in disks.stdout
      with_dict: "{{ guests }}"
      become: yes

    # List of VMs
    - name: Get list of VMs
      virt:
        command: "list_vms"
      register: vms

    #Define new vm
    - name: Define new vm
      virt:
        name: "{{ item.name }}"
        command: define
        xml: "{{ lookup('template', 'templates/vm_template.xml.j2') }}"
      when: item.name not in vms.list_vms
      with_items: "{{ guests }}"
      become: yes

    # Create and start new vm
    - name: Start vm
      virt:
        name: "{{ item.name }}"
        command: create
      with_items: "{{ guests }}"
      become: yes
    
